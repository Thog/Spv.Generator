// AUTOGENERATED: DO NOT EDIT
// Last update date: 2020-05-18 16:41:14.526086
#region Grammar License
// Copyright (c) 2014-2020 The Khronos Group Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and/or associated documentation files (the "Materials"),
// to deal in the Materials without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Materials, and to permit persons to whom the
// Materials are furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Materials.
// 
// MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS KHRONOS
// STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS SPECIFICATIONS AND
// HEADER INFORMATION ARE LOCATED AT https://www.khronos.org/registry/ 
// 
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM,OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS
// IN THE MATERIALS.
#endregion

using static Spv.Specification;

namespace Spv.Generator
{
    public partial class Module
    {
        // Miscellaneous
        
        protected Instruction Nop()
        {
            Instruction result = new Instruction(Op.OpNop);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Undef(Instruction resultType)
        {
            Instruction result = new Instruction(Op.OpUndef, GetNewId(), resultType);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SizeOf(Instruction resultType, Instruction pointer)
        {
            Instruction result = new Instruction(Op.OpSizeOf, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Annotation
        
        protected Instruction Decorate(Instruction target, Decoration decoration, params Operand[] parameters)
        {
            Instruction result = new Instruction(Op.OpDecorate);
            
            result.AddOperand(target);
            result.AddOperand(decoration);
            result.AddOperand(parameters);
            AddAnnotation(result);
            
            return result;
        }
        
        protected Instruction MemberDecorate(Instruction structureType, LiteralInteger member, Decoration decoration, params Operand[] parameters)
        {
            Instruction result = new Instruction(Op.OpMemberDecorate);
            
            result.AddOperand(structureType);
            result.AddOperand(member);
            result.AddOperand(decoration);
            result.AddOperand(parameters);
            AddAnnotation(result);
            
            return result;
        }
        
        protected Instruction DecorationGroup()
        {
            Instruction result = new Instruction(Op.OpDecorationGroup, GetNewId());
            
            AddAnnotation(result);
            
            return result;
        }
        
        protected Instruction GroupDecorate(Instruction decorationGroup, params Instruction[] targets)
        {
            Instruction result = new Instruction(Op.OpGroupDecorate);
            
            result.AddOperand(decorationGroup);
            result.AddOperand(targets);
            AddAnnotation(result);
            
            return result;
        }
        
        protected Instruction GroupMemberDecorate(Instruction decorationGroup, params Operand[] targets)
        {
            Instruction result = new Instruction(Op.OpGroupMemberDecorate);
            
            result.AddOperand(decorationGroup);
            result.AddOperand(targets);
            AddAnnotation(result);
            
            return result;
        }
        
        protected Instruction DecorateId(Instruction target, Decoration decoration, params Operand[] parameters)
        {
            Instruction result = new Instruction(Op.OpDecorateId);
            
            result.AddOperand(target);
            result.AddOperand(decoration);
            result.AddOperand(parameters);
            AddAnnotation(result);
            
            return result;
        }
        
        protected Instruction DecorateString(Instruction target, Decoration decoration, params Operand[] parameters)
        {
            Instruction result = new Instruction(Op.OpDecorateString);
            
            result.AddOperand(target);
            result.AddOperand(decoration);
            result.AddOperand(parameters);
            AddAnnotation(result);
            
            return result;
        }
        
        protected Instruction DecorateStringGOOGLE(Instruction target, Decoration decoration, params Operand[] parameters)
        {
            Instruction result = new Instruction(Op.OpDecorateStringGOOGLE);
            
            result.AddOperand(target);
            result.AddOperand(decoration);
            result.AddOperand(parameters);
            AddAnnotation(result);
            
            return result;
        }
        
        protected Instruction MemberDecorateString(Instruction structType, LiteralInteger member, Decoration decoration, params Operand[] parameters)
        {
            Instruction result = new Instruction(Op.OpMemberDecorateString);
            
            result.AddOperand(structType);
            result.AddOperand(member);
            result.AddOperand(decoration);
            result.AddOperand(parameters);
            AddAnnotation(result);
            
            return result;
        }
        
        protected Instruction MemberDecorateStringGOOGLE(Instruction structType, LiteralInteger member, Decoration decoration, params Operand[] parameters)
        {
            Instruction result = new Instruction(Op.OpMemberDecorateStringGOOGLE);
            
            result.AddOperand(structType);
            result.AddOperand(member);
            result.AddOperand(decoration);
            result.AddOperand(parameters);
            AddAnnotation(result);
            
            return result;
        }
        
        // Type-Declaration
        
        protected Instruction TypeVoid()
        {
            Instruction result = new Instruction(Op.OpTypeVoid);
            
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeBool()
        {
            Instruction result = new Instruction(Op.OpTypeBool);
            
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeInt(LiteralInteger width, LiteralInteger signedness)
        {
            Instruction result = new Instruction(Op.OpTypeInt);
            
            result.AddOperand(width);
            result.AddOperand(signedness);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeFloat(LiteralInteger width)
        {
            Instruction result = new Instruction(Op.OpTypeFloat);
            
            result.AddOperand(width);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeVector(Instruction componentType, LiteralInteger componentCount)
        {
            Instruction result = new Instruction(Op.OpTypeVector);
            
            result.AddOperand(componentType);
            result.AddOperand(componentCount);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeMatrix(Instruction columnType, LiteralInteger columnCount)
        {
            Instruction result = new Instruction(Op.OpTypeMatrix);
            
            result.AddOperand(columnType);
            result.AddOperand(columnCount);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeImage(Instruction sampledType, Dim dim, LiteralInteger depth, LiteralInteger arrayed, LiteralInteger mS, LiteralInteger sampled, ImageFormat imageFormat, AccessQualifier accessQualifier = (AccessQualifier)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpTypeImage);
            
            result.AddOperand(sampledType);
            result.AddOperand(dim);
            result.AddOperand(depth);
            result.AddOperand(arrayed);
            result.AddOperand(mS);
            result.AddOperand(sampled);
            result.AddOperand(imageFormat);
            if (accessQualifier != (AccessQualifier)int.MaxValue)
            {
                result.AddOperand(accessQualifier);
            }
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeSampler()
        {
            Instruction result = new Instruction(Op.OpTypeSampler);
            
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeSampledImage(Instruction imageType)
        {
            Instruction result = new Instruction(Op.OpTypeSampledImage);
            
            result.AddOperand(imageType);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeArray(Instruction elementType, Instruction length)
        {
            Instruction result = new Instruction(Op.OpTypeArray);
            
            result.AddOperand(elementType);
            result.AddOperand(length);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeRuntimeArray(Instruction elementType)
        {
            Instruction result = new Instruction(Op.OpTypeRuntimeArray);
            
            result.AddOperand(elementType);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeStruct(params Instruction[] parameters)
        {
            Instruction result = new Instruction(Op.OpTypeStruct);
            
            result.AddOperand(parameters);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeOpaque(string thenameoftheopaquetype)
        {
            Instruction result = new Instruction(Op.OpTypeOpaque);
            
            result.AddOperand(thenameoftheopaquetype);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypePointer(StorageClass storageClass, Instruction type)
        {
            Instruction result = new Instruction(Op.OpTypePointer);
            
            result.AddOperand(storageClass);
            result.AddOperand(type);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeFunction(Instruction returnType, params Instruction[] parameters)
        {
            Instruction result = new Instruction(Op.OpTypeFunction);
            
            result.AddOperand(returnType);
            result.AddOperand(parameters);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeEvent()
        {
            Instruction result = new Instruction(Op.OpTypeEvent);
            
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeDeviceEvent()
        {
            Instruction result = new Instruction(Op.OpTypeDeviceEvent);
            
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeReserveId()
        {
            Instruction result = new Instruction(Op.OpTypeReserveId);
            
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeQueue()
        {
            Instruction result = new Instruction(Op.OpTypeQueue);
            
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypePipe(AccessQualifier qualifier)
        {
            Instruction result = new Instruction(Op.OpTypePipe);
            
            result.AddOperand(qualifier);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeForwardPointer(Instruction pointerType, StorageClass storageClass)
        {
            Instruction result = new Instruction(Op.OpTypeForwardPointer);
            
            result.AddOperand(pointerType);
            result.AddOperand(storageClass);
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypePipeStorage()
        {
            Instruction result = new Instruction(Op.OpTypePipeStorage);
            
            AddTypeDeclaration(result);
            
            return result;
        }
        
        protected Instruction TypeNamedBarrier()
        {
            Instruction result = new Instruction(Op.OpTypeNamedBarrier);
            
            AddTypeDeclaration(result);
            
            return result;
        }
        
        // Constant-Creation
        
        protected Instruction ConstantTrue(Instruction resultType)
        {
            Instruction result = new Instruction(Op.OpConstantTrue, GetNewId(), resultType);
            
            AddGlobalVariable(result);
            
            return result;
        }
        
        protected Instruction ConstantFalse(Instruction resultType)
        {
            Instruction result = new Instruction(Op.OpConstantFalse, GetNewId(), resultType);
            
            AddGlobalVariable(result);
            
            return result;
        }
        
        protected Instruction Constant(Instruction resultType, LiteralInteger value)
        {
            Instruction result = new Instruction(Op.OpConstant, GetNewId(), resultType);
            
            result.AddOperand(value);
            AddGlobalVariable(result);
            
            return result;
        }
        
        protected Instruction ConstantComposite(Instruction resultType, params Instruction[] constituents)
        {
            Instruction result = new Instruction(Op.OpConstantComposite, GetNewId(), resultType);
            
            result.AddOperand(constituents);
            AddGlobalVariable(result);
            
            return result;
        }
        
        protected Instruction ConstantSampler(Instruction resultType, SamplerAddressingMode samplerAddressingMode, LiteralInteger param, SamplerFilterMode samplerFilterMode)
        {
            Instruction result = new Instruction(Op.OpConstantSampler, GetNewId(), resultType);
            
            result.AddOperand(samplerAddressingMode);
            result.AddOperand(param);
            result.AddOperand(samplerFilterMode);
            AddGlobalVariable(result);
            
            return result;
        }
        
        protected Instruction ConstantNull(Instruction resultType)
        {
            Instruction result = new Instruction(Op.OpConstantNull, GetNewId(), resultType);
            
            AddGlobalVariable(result);
            
            return result;
        }
        
        protected Instruction SpecConstantTrue(Instruction resultType)
        {
            Instruction result = new Instruction(Op.OpSpecConstantTrue, GetNewId(), resultType);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SpecConstantFalse(Instruction resultType)
        {
            Instruction result = new Instruction(Op.OpSpecConstantFalse, GetNewId(), resultType);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SpecConstant(Instruction resultType, LiteralInteger value)
        {
            Instruction result = new Instruction(Op.OpSpecConstant, GetNewId(), resultType);
            
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SpecConstantComposite(Instruction resultType, params Instruction[] constituents)
        {
            Instruction result = new Instruction(Op.OpSpecConstantComposite, GetNewId(), resultType);
            
            result.AddOperand(constituents);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SpecConstantOp(Instruction resultType, LiteralInteger opcode)
        {
            Instruction result = new Instruction(Op.OpSpecConstantOp, GetNewId(), resultType);
            
            result.AddOperand(opcode);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Memory
        
        protected Instruction Variable(Instruction resultType, StorageClass storageClass, Instruction initializer = null)
        {
            Instruction result = new Instruction(Op.OpVariable, GetNewId(), resultType);
            
            result.AddOperand(storageClass);
            if (initializer != null)
            {
                result.AddOperand(initializer);
            }
            return result;
        }
        
        protected Instruction ImageTexelPointer(Instruction resultType, Instruction image, Instruction coordinate, Instruction sample)
        {
            Instruction result = new Instruction(Op.OpImageTexelPointer, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            result.AddOperand(sample);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Load(Instruction resultType, Instruction pointer, MemoryAccessMask memoryAccess = (MemoryAccessMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpLoad, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            if (memoryAccess != (MemoryAccessMask)int.MaxValue)
            {
                result.AddOperand(memoryAccess);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Store(Instruction pointer, Instruction obj, MemoryAccessMask memoryAccess = (MemoryAccessMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpStore);
            
            result.AddOperand(pointer);
            result.AddOperand(obj);
            if (memoryAccess != (MemoryAccessMask)int.MaxValue)
            {
                result.AddOperand(memoryAccess);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CopyMemory(Instruction target, Instruction source, MemoryAccessMask memoryAccess0 = (MemoryAccessMask)int.MaxValue, MemoryAccessMask memoryAccess1 = (MemoryAccessMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpCopyMemory);
            
            result.AddOperand(target);
            result.AddOperand(source);
            if (memoryAccess0 != (MemoryAccessMask)int.MaxValue)
            {
                result.AddOperand(memoryAccess0);
            }
            if (memoryAccess1 != (MemoryAccessMask)int.MaxValue)
            {
                result.AddOperand(memoryAccess1);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CopyMemorySized(Instruction target, Instruction source, Instruction size, MemoryAccessMask memoryAccess0 = (MemoryAccessMask)int.MaxValue, MemoryAccessMask memoryAccess1 = (MemoryAccessMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpCopyMemorySized);
            
            result.AddOperand(target);
            result.AddOperand(source);
            result.AddOperand(size);
            if (memoryAccess0 != (MemoryAccessMask)int.MaxValue)
            {
                result.AddOperand(memoryAccess0);
            }
            if (memoryAccess1 != (MemoryAccessMask)int.MaxValue)
            {
                result.AddOperand(memoryAccess1);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AccessChain(Instruction resultType, Instruction baseObj, params Instruction[] indexes)
        {
            Instruction result = new Instruction(Op.OpAccessChain, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            result.AddOperand(indexes);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction InBoundsAccessChain(Instruction resultType, Instruction baseObj, params Instruction[] indexes)
        {
            Instruction result = new Instruction(Op.OpInBoundsAccessChain, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            result.AddOperand(indexes);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction PtrAccessChain(Instruction resultType, Instruction baseObj, Instruction element, params Instruction[] indexes)
        {
            Instruction result = new Instruction(Op.OpPtrAccessChain, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            result.AddOperand(element);
            result.AddOperand(indexes);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ArrayLength(Instruction resultType, Instruction structure, LiteralInteger arraymember)
        {
            Instruction result = new Instruction(Op.OpArrayLength, GetNewId(), resultType);
            
            result.AddOperand(structure);
            result.AddOperand(arraymember);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GenericPtrMemSemantics(Instruction resultType, Instruction pointer)
        {
            Instruction result = new Instruction(Op.OpGenericPtrMemSemantics, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction InBoundsPtrAccessChain(Instruction resultType, Instruction baseObj, Instruction element, params Instruction[] indexes)
        {
            Instruction result = new Instruction(Op.OpInBoundsPtrAccessChain, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            result.AddOperand(element);
            result.AddOperand(indexes);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction PtrEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpPtrEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction PtrNotEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpPtrNotEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction PtrDiff(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpPtrDiff, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Function
        
        protected Instruction Function(Instruction resultType, FunctionControlMask functionControl, Instruction functionType)
        {
            Instruction result = new Instruction(Op.OpFunction, GetNewId(), resultType);
            
            result.AddOperand(functionControl);
            result.AddOperand(functionType);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FunctionParameter(Instruction resultType)
        {
            Instruction result = new Instruction(Op.OpFunctionParameter, GetNewId(), resultType);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FunctionEnd()
        {
            Instruction result = new Instruction(Op.OpFunctionEnd);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FunctionCall(Instruction resultType, Instruction function, params Instruction[] parameters)
        {
            Instruction result = new Instruction(Op.OpFunctionCall, GetNewId(), resultType);
            
            result.AddOperand(function);
            result.AddOperand(parameters);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Image
        
        protected Instruction SampledImage(Instruction resultType, Instruction image, Instruction sampler)
        {
            Instruction result = new Instruction(Op.OpSampledImage, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(sampler);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSampleImplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSampleImplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSampleExplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, ImageOperandsMask imageOperands)
        {
            Instruction result = new Instruction(Op.OpImageSampleExplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(imageOperands);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSampleDrefImplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction dRef, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSampleDrefImplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(dRef);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSampleDrefExplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction dRef, ImageOperandsMask imageOperands)
        {
            Instruction result = new Instruction(Op.OpImageSampleDrefExplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(dRef);
            result.AddOperand(imageOperands);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSampleProjImplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSampleProjImplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSampleProjExplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, ImageOperandsMask imageOperands)
        {
            Instruction result = new Instruction(Op.OpImageSampleProjExplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(imageOperands);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSampleProjDrefImplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction dRef, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSampleProjDrefImplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(dRef);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSampleProjDrefExplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction dRef, ImageOperandsMask imageOperands)
        {
            Instruction result = new Instruction(Op.OpImageSampleProjDrefExplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(dRef);
            result.AddOperand(imageOperands);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageFetch(Instruction resultType, Instruction image, Instruction coordinate, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageFetch, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageGather(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction component, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageGather, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(component);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageDrefGather(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction dRef, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageDrefGather, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(dRef);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageRead(Instruction resultType, Instruction image, Instruction coordinate, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageRead, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageWrite(Instruction image, Instruction coordinate, Instruction texel, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageWrite);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            result.AddOperand(texel);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Image(Instruction resultType, Instruction sampledImage)
        {
            Instruction result = new Instruction(Op.OpImage, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageQueryFormat(Instruction resultType, Instruction image)
        {
            Instruction result = new Instruction(Op.OpImageQueryFormat, GetNewId(), resultType);
            
            result.AddOperand(image);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageQueryOrder(Instruction resultType, Instruction image)
        {
            Instruction result = new Instruction(Op.OpImageQueryOrder, GetNewId(), resultType);
            
            result.AddOperand(image);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageQuerySizeLod(Instruction resultType, Instruction image, Instruction levelofDetail)
        {
            Instruction result = new Instruction(Op.OpImageQuerySizeLod, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(levelofDetail);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageQuerySize(Instruction resultType, Instruction image)
        {
            Instruction result = new Instruction(Op.OpImageQuerySize, GetNewId(), resultType);
            
            result.AddOperand(image);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageQueryLod(Instruction resultType, Instruction sampledImage, Instruction coordinate)
        {
            Instruction result = new Instruction(Op.OpImageQueryLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageQueryLevels(Instruction resultType, Instruction image)
        {
            Instruction result = new Instruction(Op.OpImageQueryLevels, GetNewId(), resultType);
            
            result.AddOperand(image);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageQuerySamples(Instruction resultType, Instruction image)
        {
            Instruction result = new Instruction(Op.OpImageQuerySamples, GetNewId(), resultType);
            
            result.AddOperand(image);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseSampleImplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSparseSampleImplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseSampleExplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, ImageOperandsMask imageOperands)
        {
            Instruction result = new Instruction(Op.OpImageSparseSampleExplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(imageOperands);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseSampleDrefImplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction dRef, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSparseSampleDrefImplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(dRef);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseSampleDrefExplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction dRef, ImageOperandsMask imageOperands)
        {
            Instruction result = new Instruction(Op.OpImageSparseSampleDrefExplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(dRef);
            result.AddOperand(imageOperands);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseSampleProjImplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSparseSampleProjImplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseSampleProjExplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, ImageOperandsMask imageOperands)
        {
            Instruction result = new Instruction(Op.OpImageSparseSampleProjExplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(imageOperands);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseSampleProjDrefImplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction dRef, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSparseSampleProjDrefImplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(dRef);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseSampleProjDrefExplicitLod(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction dRef, ImageOperandsMask imageOperands)
        {
            Instruction result = new Instruction(Op.OpImageSparseSampleProjDrefExplicitLod, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(dRef);
            result.AddOperand(imageOperands);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseFetch(Instruction resultType, Instruction image, Instruction coordinate, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSparseFetch, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseGather(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction component, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSparseGather, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(component);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseDrefGather(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction dRef, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSparseDrefGather, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(dRef);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseTexelsResident(Instruction resultType, Instruction residentCode)
        {
            Instruction result = new Instruction(Op.OpImageSparseTexelsResident, GetNewId(), resultType);
            
            result.AddOperand(residentCode);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSparseRead(Instruction resultType, Instruction image, Instruction coordinate, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSparseRead, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ImageSampleFootprintNV(Instruction resultType, Instruction sampledImage, Instruction coordinate, Instruction granularity, Instruction coarse, ImageOperandsMask imageOperands = (ImageOperandsMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpImageSampleFootprintNV, GetNewId(), resultType);
            
            result.AddOperand(sampledImage);
            result.AddOperand(coordinate);
            result.AddOperand(granularity);
            result.AddOperand(coarse);
            if (imageOperands != (ImageOperandsMask)int.MaxValue)
            {
                result.AddOperand(imageOperands);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Conversion
        
        protected Instruction ConvertFToU(Instruction resultType, Instruction floatValue)
        {
            Instruction result = new Instruction(Op.OpConvertFToU, GetNewId(), resultType);
            
            result.AddOperand(floatValue);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ConvertFToS(Instruction resultType, Instruction floatValue)
        {
            Instruction result = new Instruction(Op.OpConvertFToS, GetNewId(), resultType);
            
            result.AddOperand(floatValue);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ConvertSToF(Instruction resultType, Instruction signedValue)
        {
            Instruction result = new Instruction(Op.OpConvertSToF, GetNewId(), resultType);
            
            result.AddOperand(signedValue);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ConvertUToF(Instruction resultType, Instruction unsignedValue)
        {
            Instruction result = new Instruction(Op.OpConvertUToF, GetNewId(), resultType);
            
            result.AddOperand(unsignedValue);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UConvert(Instruction resultType, Instruction unsignedValue)
        {
            Instruction result = new Instruction(Op.OpUConvert, GetNewId(), resultType);
            
            result.AddOperand(unsignedValue);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SConvert(Instruction resultType, Instruction signedValue)
        {
            Instruction result = new Instruction(Op.OpSConvert, GetNewId(), resultType);
            
            result.AddOperand(signedValue);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FConvert(Instruction resultType, Instruction floatValue)
        {
            Instruction result = new Instruction(Op.OpFConvert, GetNewId(), resultType);
            
            result.AddOperand(floatValue);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction QuantizeToF16(Instruction resultType, Instruction value)
        {
            Instruction result = new Instruction(Op.OpQuantizeToF16, GetNewId(), resultType);
            
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ConvertPtrToU(Instruction resultType, Instruction pointer)
        {
            Instruction result = new Instruction(Op.OpConvertPtrToU, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SatConvertSToU(Instruction resultType, Instruction signedValue)
        {
            Instruction result = new Instruction(Op.OpSatConvertSToU, GetNewId(), resultType);
            
            result.AddOperand(signedValue);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SatConvertUToS(Instruction resultType, Instruction unsignedValue)
        {
            Instruction result = new Instruction(Op.OpSatConvertUToS, GetNewId(), resultType);
            
            result.AddOperand(unsignedValue);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ConvertUToPtr(Instruction resultType, Instruction integerValue)
        {
            Instruction result = new Instruction(Op.OpConvertUToPtr, GetNewId(), resultType);
            
            result.AddOperand(integerValue);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction PtrCastToGeneric(Instruction resultType, Instruction pointer)
        {
            Instruction result = new Instruction(Op.OpPtrCastToGeneric, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GenericCastToPtr(Instruction resultType, Instruction pointer)
        {
            Instruction result = new Instruction(Op.OpGenericCastToPtr, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GenericCastToPtrExplicit(Instruction resultType, Instruction pointer, StorageClass storage)
        {
            Instruction result = new Instruction(Op.OpGenericCastToPtrExplicit, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(storage);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Bitcast(Instruction resultType, Instruction operand)
        {
            Instruction result = new Instruction(Op.OpBitcast, GetNewId(), resultType);
            
            result.AddOperand(operand);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Composite
        
        protected Instruction VectorExtractDynamic(Instruction resultType, Instruction vector, Instruction index)
        {
            Instruction result = new Instruction(Op.OpVectorExtractDynamic, GetNewId(), resultType);
            
            result.AddOperand(vector);
            result.AddOperand(index);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction VectorInsertDynamic(Instruction resultType, Instruction vector, Instruction component, Instruction index)
        {
            Instruction result = new Instruction(Op.OpVectorInsertDynamic, GetNewId(), resultType);
            
            result.AddOperand(vector);
            result.AddOperand(component);
            result.AddOperand(index);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction VectorShuffle(Instruction resultType, Instruction vector1, Instruction vector2, params LiteralInteger[] components)
        {
            Instruction result = new Instruction(Op.OpVectorShuffle, GetNewId(), resultType);
            
            result.AddOperand(vector1);
            result.AddOperand(vector2);
            result.AddOperand(components);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CompositeConstruct(Instruction resultType, params Instruction[] constituents)
        {
            Instruction result = new Instruction(Op.OpCompositeConstruct, GetNewId(), resultType);
            
            result.AddOperand(constituents);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CompositeExtract(Instruction resultType, Instruction composite, params LiteralInteger[] indexes)
        {
            Instruction result = new Instruction(Op.OpCompositeExtract, GetNewId(), resultType);
            
            result.AddOperand(composite);
            result.AddOperand(indexes);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CompositeInsert(Instruction resultType, Instruction obj, Instruction composite, params LiteralInteger[] indexes)
        {
            Instruction result = new Instruction(Op.OpCompositeInsert, GetNewId(), resultType);
            
            result.AddOperand(obj);
            result.AddOperand(composite);
            result.AddOperand(indexes);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CopyObject(Instruction resultType, Instruction operand)
        {
            Instruction result = new Instruction(Op.OpCopyObject, GetNewId(), resultType);
            
            result.AddOperand(operand);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Transpose(Instruction resultType, Instruction matrix)
        {
            Instruction result = new Instruction(Op.OpTranspose, GetNewId(), resultType);
            
            result.AddOperand(matrix);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CopyLogical(Instruction resultType, Instruction operand)
        {
            Instruction result = new Instruction(Op.OpCopyLogical, GetNewId(), resultType);
            
            result.AddOperand(operand);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Arithmetic
        
        protected Instruction SNegate(Instruction resultType, Instruction operand)
        {
            Instruction result = new Instruction(Op.OpSNegate, GetNewId(), resultType);
            
            result.AddOperand(operand);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FNegate(Instruction resultType, Instruction operand)
        {
            Instruction result = new Instruction(Op.OpFNegate, GetNewId(), resultType);
            
            result.AddOperand(operand);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IAdd(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpIAdd, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FAdd(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFAdd, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ISub(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpISub, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FSub(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFSub, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IMul(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpIMul, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FMul(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFMul, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UDiv(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpUDiv, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SDiv(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpSDiv, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FDiv(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFDiv, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UMod(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpUMod, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SRem(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpSRem, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SMod(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpSMod, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FRem(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFRem, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FMod(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFMod, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction VectorTimesScalar(Instruction resultType, Instruction vector, Instruction scalar)
        {
            Instruction result = new Instruction(Op.OpVectorTimesScalar, GetNewId(), resultType);
            
            result.AddOperand(vector);
            result.AddOperand(scalar);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction MatrixTimesScalar(Instruction resultType, Instruction matrix, Instruction scalar)
        {
            Instruction result = new Instruction(Op.OpMatrixTimesScalar, GetNewId(), resultType);
            
            result.AddOperand(matrix);
            result.AddOperand(scalar);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction VectorTimesMatrix(Instruction resultType, Instruction vector, Instruction matrix)
        {
            Instruction result = new Instruction(Op.OpVectorTimesMatrix, GetNewId(), resultType);
            
            result.AddOperand(vector);
            result.AddOperand(matrix);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction MatrixTimesVector(Instruction resultType, Instruction matrix, Instruction vector)
        {
            Instruction result = new Instruction(Op.OpMatrixTimesVector, GetNewId(), resultType);
            
            result.AddOperand(matrix);
            result.AddOperand(vector);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction MatrixTimesMatrix(Instruction resultType, Instruction leftMatrix, Instruction rightMatrix)
        {
            Instruction result = new Instruction(Op.OpMatrixTimesMatrix, GetNewId(), resultType);
            
            result.AddOperand(leftMatrix);
            result.AddOperand(rightMatrix);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction OuterProduct(Instruction resultType, Instruction vector1, Instruction vector2)
        {
            Instruction result = new Instruction(Op.OpOuterProduct, GetNewId(), resultType);
            
            result.AddOperand(vector1);
            result.AddOperand(vector2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Dot(Instruction resultType, Instruction vector1, Instruction vector2)
        {
            Instruction result = new Instruction(Op.OpDot, GetNewId(), resultType);
            
            result.AddOperand(vector1);
            result.AddOperand(vector2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IAddCarry(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpIAddCarry, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ISubBorrow(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpISubBorrow, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UMulExtended(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpUMulExtended, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SMulExtended(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpSMulExtended, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Bit
        
        protected Instruction ShiftRightLogical(Instruction resultType, Instruction baseObj, Instruction shift)
        {
            Instruction result = new Instruction(Op.OpShiftRightLogical, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            result.AddOperand(shift);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ShiftRightArithmetic(Instruction resultType, Instruction baseObj, Instruction shift)
        {
            Instruction result = new Instruction(Op.OpShiftRightArithmetic, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            result.AddOperand(shift);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ShiftLeftLogical(Instruction resultType, Instruction baseObj, Instruction shift)
        {
            Instruction result = new Instruction(Op.OpShiftLeftLogical, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            result.AddOperand(shift);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BitwiseOr(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpBitwiseOr, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BitwiseXor(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpBitwiseXor, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BitwiseAnd(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpBitwiseAnd, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Not(Instruction resultType, Instruction operand)
        {
            Instruction result = new Instruction(Op.OpNot, GetNewId(), resultType);
            
            result.AddOperand(operand);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BitFieldInsert(Instruction resultType, Instruction baseObj, Instruction insert, Instruction offset, Instruction count)
        {
            Instruction result = new Instruction(Op.OpBitFieldInsert, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            result.AddOperand(insert);
            result.AddOperand(offset);
            result.AddOperand(count);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BitFieldSExtract(Instruction resultType, Instruction baseObj, Instruction offset, Instruction count)
        {
            Instruction result = new Instruction(Op.OpBitFieldSExtract, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            result.AddOperand(offset);
            result.AddOperand(count);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BitFieldUExtract(Instruction resultType, Instruction baseObj, Instruction offset, Instruction count)
        {
            Instruction result = new Instruction(Op.OpBitFieldUExtract, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            result.AddOperand(offset);
            result.AddOperand(count);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BitReverse(Instruction resultType, Instruction baseObj)
        {
            Instruction result = new Instruction(Op.OpBitReverse, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BitCount(Instruction resultType, Instruction baseObj)
        {
            Instruction result = new Instruction(Op.OpBitCount, GetNewId(), resultType);
            
            result.AddOperand(baseObj);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Relational_and_Logical
        
        protected Instruction Any(Instruction resultType, Instruction vector)
        {
            Instruction result = new Instruction(Op.OpAny, GetNewId(), resultType);
            
            result.AddOperand(vector);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction All(Instruction resultType, Instruction vector)
        {
            Instruction result = new Instruction(Op.OpAll, GetNewId(), resultType);
            
            result.AddOperand(vector);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IsNan(Instruction resultType, Instruction x)
        {
            Instruction result = new Instruction(Op.OpIsNan, GetNewId(), resultType);
            
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IsInf(Instruction resultType, Instruction x)
        {
            Instruction result = new Instruction(Op.OpIsInf, GetNewId(), resultType);
            
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IsFinite(Instruction resultType, Instruction x)
        {
            Instruction result = new Instruction(Op.OpIsFinite, GetNewId(), resultType);
            
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IsNormal(Instruction resultType, Instruction x)
        {
            Instruction result = new Instruction(Op.OpIsNormal, GetNewId(), resultType);
            
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SignBitSet(Instruction resultType, Instruction x)
        {
            Instruction result = new Instruction(Op.OpSignBitSet, GetNewId(), resultType);
            
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction LessOrGreater(Instruction resultType, Instruction x, Instruction y)
        {
            Instruction result = new Instruction(Op.OpLessOrGreater, GetNewId(), resultType);
            
            result.AddOperand(x);
            result.AddOperand(y);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Ordered(Instruction resultType, Instruction x, Instruction y)
        {
            Instruction result = new Instruction(Op.OpOrdered, GetNewId(), resultType);
            
            result.AddOperand(x);
            result.AddOperand(y);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Unordered(Instruction resultType, Instruction x, Instruction y)
        {
            Instruction result = new Instruction(Op.OpUnordered, GetNewId(), resultType);
            
            result.AddOperand(x);
            result.AddOperand(y);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction LogicalEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpLogicalEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction LogicalNotEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpLogicalNotEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction LogicalOr(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpLogicalOr, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction LogicalAnd(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpLogicalAnd, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction LogicalNot(Instruction resultType, Instruction operand)
        {
            Instruction result = new Instruction(Op.OpLogicalNot, GetNewId(), resultType);
            
            result.AddOperand(operand);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Select(Instruction resultType, Instruction condition, Instruction object1, Instruction object2)
        {
            Instruction result = new Instruction(Op.OpSelect, GetNewId(), resultType);
            
            result.AddOperand(condition);
            result.AddOperand(object1);
            result.AddOperand(object2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpIEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction INotEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpINotEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UGreaterThan(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpUGreaterThan, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SGreaterThan(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpSGreaterThan, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UGreaterThanEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpUGreaterThanEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SGreaterThanEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpSGreaterThanEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ULessThan(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpULessThan, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SLessThan(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpSLessThan, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ULessThanEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpULessThanEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SLessThanEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpSLessThanEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FOrdEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFOrdEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FUnordEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFUnordEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FOrdNotEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFOrdNotEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FUnordNotEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFUnordNotEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FOrdLessThan(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFOrdLessThan, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FUnordLessThan(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFUnordLessThan, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FOrdGreaterThan(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFOrdGreaterThan, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FUnordGreaterThan(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFUnordGreaterThan, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FOrdLessThanEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFOrdLessThanEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FUnordLessThanEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFUnordLessThanEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FOrdGreaterThanEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFOrdGreaterThanEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FUnordGreaterThanEqual(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpFUnordGreaterThanEqual, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Derivative
        
        protected Instruction DPdx(Instruction resultType, Instruction p)
        {
            Instruction result = new Instruction(Op.OpDPdx, GetNewId(), resultType);
            
            result.AddOperand(p);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction DPdy(Instruction resultType, Instruction p)
        {
            Instruction result = new Instruction(Op.OpDPdy, GetNewId(), resultType);
            
            result.AddOperand(p);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Fwidth(Instruction resultType, Instruction p)
        {
            Instruction result = new Instruction(Op.OpFwidth, GetNewId(), resultType);
            
            result.AddOperand(p);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction DPdxFine(Instruction resultType, Instruction p)
        {
            Instruction result = new Instruction(Op.OpDPdxFine, GetNewId(), resultType);
            
            result.AddOperand(p);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction DPdyFine(Instruction resultType, Instruction p)
        {
            Instruction result = new Instruction(Op.OpDPdyFine, GetNewId(), resultType);
            
            result.AddOperand(p);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FwidthFine(Instruction resultType, Instruction p)
        {
            Instruction result = new Instruction(Op.OpFwidthFine, GetNewId(), resultType);
            
            result.AddOperand(p);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction DPdxCoarse(Instruction resultType, Instruction p)
        {
            Instruction result = new Instruction(Op.OpDPdxCoarse, GetNewId(), resultType);
            
            result.AddOperand(p);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction DPdyCoarse(Instruction resultType, Instruction p)
        {
            Instruction result = new Instruction(Op.OpDPdyCoarse, GetNewId(), resultType);
            
            result.AddOperand(p);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FwidthCoarse(Instruction resultType, Instruction p)
        {
            Instruction result = new Instruction(Op.OpFwidthCoarse, GetNewId(), resultType);
            
            result.AddOperand(p);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Control-Flow
        
        protected Instruction Phi(Instruction resultType, params Instruction[] parameters)
        {
            Instruction result = new Instruction(Op.OpPhi, GetNewId(), resultType);
            
            result.AddOperand(parameters);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction LoopMerge(Instruction mergeBlock, Instruction continueTarget, LoopControlMask loopControl)
        {
            Instruction result = new Instruction(Op.OpLoopMerge);
            
            result.AddOperand(mergeBlock);
            result.AddOperand(continueTarget);
            result.AddOperand(loopControl);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SelectionMerge(Instruction mergeBlock, SelectionControlMask selectionControl)
        {
            Instruction result = new Instruction(Op.OpSelectionMerge);
            
            result.AddOperand(mergeBlock);
            result.AddOperand(selectionControl);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Label()
        {
            Instruction result = new Instruction(Op.OpLabel);
            
            return result;
        }
        
        protected Instruction Branch(Instruction targetLabel)
        {
            Instruction result = new Instruction(Op.OpBranch);
            
            result.AddOperand(targetLabel);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BranchConditional(Instruction condition, Instruction trueLabel, Instruction falseLabel, params LiteralInteger[] branchweights)
        {
            Instruction result = new Instruction(Op.OpBranchConditional);
            
            result.AddOperand(condition);
            result.AddOperand(trueLabel);
            result.AddOperand(falseLabel);
            result.AddOperand(branchweights);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Switch(Instruction selector, Instruction defaultObj, params Operand[] target)
        {
            Instruction result = new Instruction(Op.OpSwitch);
            
            result.AddOperand(selector);
            result.AddOperand(defaultObj);
            result.AddOperand(target);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Kill()
        {
            Instruction result = new Instruction(Op.OpKill);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Return()
        {
            Instruction result = new Instruction(Op.OpReturn);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ReturnValue(Instruction value)
        {
            Instruction result = new Instruction(Op.OpReturnValue);
            
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction Unreachable()
        {
            Instruction result = new Instruction(Op.OpUnreachable);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction LifetimeStart(Instruction pointer, LiteralInteger size)
        {
            Instruction result = new Instruction(Op.OpLifetimeStart);
            
            result.AddOperand(pointer);
            result.AddOperand(size);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction LifetimeStop(Instruction pointer, LiteralInteger size)
        {
            Instruction result = new Instruction(Op.OpLifetimeStop);
            
            result.AddOperand(pointer);
            result.AddOperand(size);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Atomic
        
        protected Instruction AtomicLoad(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics)
        {
            Instruction result = new Instruction(Op.OpAtomicLoad, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicStore(Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicStore);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicExchange(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicExchange, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicCompareExchange(Instruction resultType, Instruction pointer, Instruction memory, Instruction equal, Instruction unequal, Instruction value, Instruction comparator)
        {
            Instruction result = new Instruction(Op.OpAtomicCompareExchange, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(equal);
            result.AddOperand(unequal);
            result.AddOperand(value);
            result.AddOperand(comparator);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicCompareExchangeWeak(Instruction resultType, Instruction pointer, Instruction memory, Instruction equal, Instruction unequal, Instruction value, Instruction comparator)
        {
            Instruction result = new Instruction(Op.OpAtomicCompareExchangeWeak, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(equal);
            result.AddOperand(unequal);
            result.AddOperand(value);
            result.AddOperand(comparator);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicIIncrement(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics)
        {
            Instruction result = new Instruction(Op.OpAtomicIIncrement, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicIDecrement(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics)
        {
            Instruction result = new Instruction(Op.OpAtomicIDecrement, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicIAdd(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicIAdd, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicISub(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicISub, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicSMin(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicSMin, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicUMin(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicUMin, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicSMax(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicSMax, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicUMax(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicUMax, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicAnd(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicAnd, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicOr(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicOr, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicXor(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics, Instruction value)
        {
            Instruction result = new Instruction(Op.OpAtomicXor, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicFlagTestAndSet(Instruction resultType, Instruction pointer, Instruction memory, Instruction semantics)
        {
            Instruction result = new Instruction(Op.OpAtomicFlagTestAndSet, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AtomicFlagClear(Instruction pointer, Instruction memory, Instruction semantics)
        {
            Instruction result = new Instruction(Op.OpAtomicFlagClear);
            
            result.AddOperand(pointer);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Primitive
        
        protected Instruction EmitVertex()
        {
            Instruction result = new Instruction(Op.OpEmitVertex);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction EndPrimitive()
        {
            Instruction result = new Instruction(Op.OpEndPrimitive);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction EmitStreamVertex(Instruction stream)
        {
            Instruction result = new Instruction(Op.OpEmitStreamVertex);
            
            result.AddOperand(stream);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction EndStreamPrimitive(Instruction stream)
        {
            Instruction result = new Instruction(Op.OpEndStreamPrimitive);
            
            result.AddOperand(stream);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Barrier
        
        protected Instruction ControlBarrier(Instruction execution, Instruction memory, Instruction semantics)
        {
            Instruction result = new Instruction(Op.OpControlBarrier);
            
            result.AddOperand(execution);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction MemoryBarrier(Instruction memory, Instruction semantics)
        {
            Instruction result = new Instruction(Op.OpMemoryBarrier);
            
            result.AddOperand(memory);
            result.AddOperand(semantics);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction NamedBarrierInitialize(Instruction resultType, Instruction subgroupCount)
        {
            Instruction result = new Instruction(Op.OpNamedBarrierInitialize, GetNewId(), resultType);
            
            result.AddOperand(subgroupCount);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction MemoryNamedBarrier(Instruction namedBarrier, Instruction memory, Instruction semantics)
        {
            Instruction result = new Instruction(Op.OpMemoryNamedBarrier);
            
            result.AddOperand(namedBarrier);
            result.AddOperand(memory);
            result.AddOperand(semantics);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Group
        
        protected Instruction GroupAsyncCopy(Instruction resultType, Instruction execution, Instruction destination, Instruction source, Instruction numElements, Instruction stride, Instruction eventObj)
        {
            Instruction result = new Instruction(Op.OpGroupAsyncCopy, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(destination);
            result.AddOperand(source);
            result.AddOperand(numElements);
            result.AddOperand(stride);
            result.AddOperand(eventObj);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupWaitEvents(Instruction execution, Instruction numEvents, Instruction eventsList)
        {
            Instruction result = new Instruction(Op.OpGroupWaitEvents);
            
            result.AddOperand(execution);
            result.AddOperand(numEvents);
            result.AddOperand(eventsList);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupAll(Instruction resultType, Instruction execution, Instruction predicate)
        {
            Instruction result = new Instruction(Op.OpGroupAll, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(predicate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupAny(Instruction resultType, Instruction execution, Instruction predicate)
        {
            Instruction result = new Instruction(Op.OpGroupAny, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(predicate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupBroadcast(Instruction resultType, Instruction execution, Instruction value, Instruction localId)
        {
            Instruction result = new Instruction(Op.OpGroupBroadcast, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            result.AddOperand(localId);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupIAdd(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupIAdd, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupFAdd(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupFAdd, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupFMin(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupFMin, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupUMin(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupUMin, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupSMin(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupSMin, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupFMax(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupFMax, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupUMax(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupUMax, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupSMax(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupSMax, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupBallotKHR(Instruction resultType, Instruction predicate)
        {
            Instruction result = new Instruction(Op.OpSubgroupBallotKHR, GetNewId(), resultType);
            
            result.AddOperand(predicate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupFirstInvocationKHR(Instruction resultType, Instruction value)
        {
            Instruction result = new Instruction(Op.OpSubgroupFirstInvocationKHR, GetNewId(), resultType);
            
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupAllKHR(Instruction resultType, Instruction predicate)
        {
            Instruction result = new Instruction(Op.OpSubgroupAllKHR, GetNewId(), resultType);
            
            result.AddOperand(predicate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupAnyKHR(Instruction resultType, Instruction predicate)
        {
            Instruction result = new Instruction(Op.OpSubgroupAnyKHR, GetNewId(), resultType);
            
            result.AddOperand(predicate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupAllEqualKHR(Instruction resultType, Instruction predicate)
        {
            Instruction result = new Instruction(Op.OpSubgroupAllEqualKHR, GetNewId(), resultType);
            
            result.AddOperand(predicate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupReadInvocationKHR(Instruction resultType, Instruction value, Instruction index)
        {
            Instruction result = new Instruction(Op.OpSubgroupReadInvocationKHR, GetNewId(), resultType);
            
            result.AddOperand(value);
            result.AddOperand(index);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupIAddNonUniformAMD(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupIAddNonUniformAMD, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupFAddNonUniformAMD(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupFAddNonUniformAMD, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupFMinNonUniformAMD(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupFMinNonUniformAMD, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupUMinNonUniformAMD(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupUMinNonUniformAMD, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupSMinNonUniformAMD(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupSMinNonUniformAMD, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupFMaxNonUniformAMD(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupFMaxNonUniformAMD, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupUMaxNonUniformAMD(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupUMaxNonUniformAMD, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupSMaxNonUniformAMD(Instruction resultType, Instruction execution, GroupOperation operation, Instruction x)
        {
            Instruction result = new Instruction(Op.OpGroupSMaxNonUniformAMD, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(x);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupShuffleINTEL(Instruction resultType, Instruction data, Instruction invocationId)
        {
            Instruction result = new Instruction(Op.OpSubgroupShuffleINTEL, GetNewId(), resultType);
            
            result.AddOperand(data);
            result.AddOperand(invocationId);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupShuffleDownINTEL(Instruction resultType, Instruction current, Instruction next, Instruction delta)
        {
            Instruction result = new Instruction(Op.OpSubgroupShuffleDownINTEL, GetNewId(), resultType);
            
            result.AddOperand(current);
            result.AddOperand(next);
            result.AddOperand(delta);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupShuffleUpINTEL(Instruction resultType, Instruction previous, Instruction current, Instruction delta)
        {
            Instruction result = new Instruction(Op.OpSubgroupShuffleUpINTEL, GetNewId(), resultType);
            
            result.AddOperand(previous);
            result.AddOperand(current);
            result.AddOperand(delta);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupShuffleXorINTEL(Instruction resultType, Instruction data, Instruction value)
        {
            Instruction result = new Instruction(Op.OpSubgroupShuffleXorINTEL, GetNewId(), resultType);
            
            result.AddOperand(data);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupBlockReadINTEL(Instruction resultType, Instruction ptr)
        {
            Instruction result = new Instruction(Op.OpSubgroupBlockReadINTEL, GetNewId(), resultType);
            
            result.AddOperand(ptr);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupBlockWriteINTEL(Instruction ptr, Instruction data)
        {
            Instruction result = new Instruction(Op.OpSubgroupBlockWriteINTEL);
            
            result.AddOperand(ptr);
            result.AddOperand(data);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupImageBlockReadINTEL(Instruction resultType, Instruction image, Instruction coordinate)
        {
            Instruction result = new Instruction(Op.OpSubgroupImageBlockReadINTEL, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupImageBlockWriteINTEL(Instruction image, Instruction coordinate, Instruction data)
        {
            Instruction result = new Instruction(Op.OpSubgroupImageBlockWriteINTEL);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            result.AddOperand(data);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupImageMediaBlockReadINTEL(Instruction resultType, Instruction image, Instruction coordinate, Instruction width, Instruction height)
        {
            Instruction result = new Instruction(Op.OpSubgroupImageMediaBlockReadINTEL, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            result.AddOperand(width);
            result.AddOperand(height);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SubgroupImageMediaBlockWriteINTEL(Instruction image, Instruction coordinate, Instruction width, Instruction height, Instruction data)
        {
            Instruction result = new Instruction(Op.OpSubgroupImageMediaBlockWriteINTEL);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            result.AddOperand(width);
            result.AddOperand(height);
            result.AddOperand(data);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Device-Side_Enqueue
        
        protected Instruction EnqueueMarker(Instruction resultType, Instruction queue, Instruction numEvents, Instruction waitEvents, Instruction retEvent)
        {
            Instruction result = new Instruction(Op.OpEnqueueMarker, GetNewId(), resultType);
            
            result.AddOperand(queue);
            result.AddOperand(numEvents);
            result.AddOperand(waitEvents);
            result.AddOperand(retEvent);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction EnqueueKernel(Instruction resultType, Instruction queue, Instruction flags, Instruction nDRange, Instruction numEvents, Instruction waitEvents, Instruction retEvent, Instruction invoke, Instruction param, Instruction paramSize, Instruction paramAlign, params Instruction[] localSize)
        {
            Instruction result = new Instruction(Op.OpEnqueueKernel, GetNewId(), resultType);
            
            result.AddOperand(queue);
            result.AddOperand(flags);
            result.AddOperand(nDRange);
            result.AddOperand(numEvents);
            result.AddOperand(waitEvents);
            result.AddOperand(retEvent);
            result.AddOperand(invoke);
            result.AddOperand(param);
            result.AddOperand(paramSize);
            result.AddOperand(paramAlign);
            result.AddOperand(localSize);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GetKernelNDrangeSubGroupCount(Instruction resultType, Instruction nDRange, Instruction invoke, Instruction param, Instruction paramSize, Instruction paramAlign)
        {
            Instruction result = new Instruction(Op.OpGetKernelNDrangeSubGroupCount, GetNewId(), resultType);
            
            result.AddOperand(nDRange);
            result.AddOperand(invoke);
            result.AddOperand(param);
            result.AddOperand(paramSize);
            result.AddOperand(paramAlign);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GetKernelNDrangeMaxSubGroupSize(Instruction resultType, Instruction nDRange, Instruction invoke, Instruction param, Instruction paramSize, Instruction paramAlign)
        {
            Instruction result = new Instruction(Op.OpGetKernelNDrangeMaxSubGroupSize, GetNewId(), resultType);
            
            result.AddOperand(nDRange);
            result.AddOperand(invoke);
            result.AddOperand(param);
            result.AddOperand(paramSize);
            result.AddOperand(paramAlign);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GetKernelWorkGroupSize(Instruction resultType, Instruction invoke, Instruction param, Instruction paramSize, Instruction paramAlign)
        {
            Instruction result = new Instruction(Op.OpGetKernelWorkGroupSize, GetNewId(), resultType);
            
            result.AddOperand(invoke);
            result.AddOperand(param);
            result.AddOperand(paramSize);
            result.AddOperand(paramAlign);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GetKernelPreferredWorkGroupSizeMultiple(Instruction resultType, Instruction invoke, Instruction param, Instruction paramSize, Instruction paramAlign)
        {
            Instruction result = new Instruction(Op.OpGetKernelPreferredWorkGroupSizeMultiple, GetNewId(), resultType);
            
            result.AddOperand(invoke);
            result.AddOperand(param);
            result.AddOperand(paramSize);
            result.AddOperand(paramAlign);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RetainEvent(Instruction eventObj)
        {
            Instruction result = new Instruction(Op.OpRetainEvent);
            
            result.AddOperand(eventObj);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ReleaseEvent(Instruction eventObj)
        {
            Instruction result = new Instruction(Op.OpReleaseEvent);
            
            result.AddOperand(eventObj);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CreateUserEvent(Instruction resultType)
        {
            Instruction result = new Instruction(Op.OpCreateUserEvent, GetNewId(), resultType);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IsValidEvent(Instruction resultType, Instruction eventObj)
        {
            Instruction result = new Instruction(Op.OpIsValidEvent, GetNewId(), resultType);
            
            result.AddOperand(eventObj);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction SetUserEventStatus(Instruction eventObj, Instruction status)
        {
            Instruction result = new Instruction(Op.OpSetUserEventStatus);
            
            result.AddOperand(eventObj);
            result.AddOperand(status);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CaptureEventProfilingInfo(Instruction eventObj, Instruction profilingInfo, Instruction value)
        {
            Instruction result = new Instruction(Op.OpCaptureEventProfilingInfo);
            
            result.AddOperand(eventObj);
            result.AddOperand(profilingInfo);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GetDefaultQueue(Instruction resultType)
        {
            Instruction result = new Instruction(Op.OpGetDefaultQueue, GetNewId(), resultType);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BuildNDRange(Instruction resultType, Instruction globalWorkSize, Instruction localWorkSize, Instruction globalWorkOffset)
        {
            Instruction result = new Instruction(Op.OpBuildNDRange, GetNewId(), resultType);
            
            result.AddOperand(globalWorkSize);
            result.AddOperand(localWorkSize);
            result.AddOperand(globalWorkOffset);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GetKernelLocalSizeForSubgroupCount(Instruction resultType, Instruction subgroupCount, Instruction invoke, Instruction param, Instruction paramSize, Instruction paramAlign)
        {
            Instruction result = new Instruction(Op.OpGetKernelLocalSizeForSubgroupCount, GetNewId(), resultType);
            
            result.AddOperand(subgroupCount);
            result.AddOperand(invoke);
            result.AddOperand(param);
            result.AddOperand(paramSize);
            result.AddOperand(paramAlign);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GetKernelMaxNumSubgroups(Instruction resultType, Instruction invoke, Instruction param, Instruction paramSize, Instruction paramAlign)
        {
            Instruction result = new Instruction(Op.OpGetKernelMaxNumSubgroups, GetNewId(), resultType);
            
            result.AddOperand(invoke);
            result.AddOperand(param);
            result.AddOperand(paramSize);
            result.AddOperand(paramAlign);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Pipe
        
        protected Instruction ReadPipe(Instruction resultType, Instruction pipe, Instruction pointer, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpReadPipe, GetNewId(), resultType);
            
            result.AddOperand(pipe);
            result.AddOperand(pointer);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction WritePipe(Instruction resultType, Instruction pipe, Instruction pointer, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpWritePipe, GetNewId(), resultType);
            
            result.AddOperand(pipe);
            result.AddOperand(pointer);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ReservedReadPipe(Instruction resultType, Instruction pipe, Instruction reserveId, Instruction index, Instruction pointer, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpReservedReadPipe, GetNewId(), resultType);
            
            result.AddOperand(pipe);
            result.AddOperand(reserveId);
            result.AddOperand(index);
            result.AddOperand(pointer);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ReservedWritePipe(Instruction resultType, Instruction pipe, Instruction reserveId, Instruction index, Instruction pointer, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpReservedWritePipe, GetNewId(), resultType);
            
            result.AddOperand(pipe);
            result.AddOperand(reserveId);
            result.AddOperand(index);
            result.AddOperand(pointer);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ReserveReadPipePackets(Instruction resultType, Instruction pipe, Instruction numPackets, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpReserveReadPipePackets, GetNewId(), resultType);
            
            result.AddOperand(pipe);
            result.AddOperand(numPackets);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ReserveWritePipePackets(Instruction resultType, Instruction pipe, Instruction numPackets, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpReserveWritePipePackets, GetNewId(), resultType);
            
            result.AddOperand(pipe);
            result.AddOperand(numPackets);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CommitReadPipe(Instruction pipe, Instruction reserveId, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpCommitReadPipe);
            
            result.AddOperand(pipe);
            result.AddOperand(reserveId);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CommitWritePipe(Instruction pipe, Instruction reserveId, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpCommitWritePipe);
            
            result.AddOperand(pipe);
            result.AddOperand(reserveId);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IsValidReserveId(Instruction resultType, Instruction reserveId)
        {
            Instruction result = new Instruction(Op.OpIsValidReserveId, GetNewId(), resultType);
            
            result.AddOperand(reserveId);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GetNumPipePackets(Instruction resultType, Instruction pipe, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpGetNumPipePackets, GetNewId(), resultType);
            
            result.AddOperand(pipe);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GetMaxPipePackets(Instruction resultType, Instruction pipe, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpGetMaxPipePackets, GetNewId(), resultType);
            
            result.AddOperand(pipe);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupReserveReadPipePackets(Instruction resultType, Instruction execution, Instruction pipe, Instruction numPackets, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpGroupReserveReadPipePackets, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(pipe);
            result.AddOperand(numPackets);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupReserveWritePipePackets(Instruction resultType, Instruction execution, Instruction pipe, Instruction numPackets, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpGroupReserveWritePipePackets, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(pipe);
            result.AddOperand(numPackets);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupCommitReadPipe(Instruction execution, Instruction pipe, Instruction reserveId, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpGroupCommitReadPipe);
            
            result.AddOperand(execution);
            result.AddOperand(pipe);
            result.AddOperand(reserveId);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupCommitWritePipe(Instruction execution, Instruction pipe, Instruction reserveId, Instruction packetSize, Instruction packetAlignment)
        {
            Instruction result = new Instruction(Op.OpGroupCommitWritePipe);
            
            result.AddOperand(execution);
            result.AddOperand(pipe);
            result.AddOperand(reserveId);
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ConstantPipeStorage(Instruction resultType, LiteralInteger packetSize, LiteralInteger packetAlignment, LiteralInteger capacity)
        {
            Instruction result = new Instruction(Op.OpConstantPipeStorage, GetNewId(), resultType);
            
            result.AddOperand(packetSize);
            result.AddOperand(packetAlignment);
            result.AddOperand(capacity);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CreatePipeFromPipeStorage(Instruction resultType, Instruction pipeStorage)
        {
            Instruction result = new Instruction(Op.OpCreatePipeFromPipeStorage, GetNewId(), resultType);
            
            result.AddOperand(pipeStorage);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Non-Uniform
        
        protected Instruction GroupNonUniformElect(Instruction resultType, Instruction execution)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformElect, GetNewId(), resultType);
            
            result.AddOperand(execution);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformAll(Instruction resultType, Instruction execution, Instruction predicate)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformAll, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(predicate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformAny(Instruction resultType, Instruction execution, Instruction predicate)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformAny, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(predicate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformAllEqual(Instruction resultType, Instruction execution, Instruction value)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformAllEqual, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformBroadcast(Instruction resultType, Instruction execution, Instruction value, Instruction id)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformBroadcast, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            result.AddOperand(id);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformBroadcastFirst(Instruction resultType, Instruction execution, Instruction value)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformBroadcastFirst, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformBallot(Instruction resultType, Instruction execution, Instruction predicate)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformBallot, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(predicate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformInverseBallot(Instruction resultType, Instruction execution, Instruction value)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformInverseBallot, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformBallotBitExtract(Instruction resultType, Instruction execution, Instruction value, Instruction index)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformBallotBitExtract, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            result.AddOperand(index);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformBallotBitCount(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformBallotBitCount, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformBallotFindLSB(Instruction resultType, Instruction execution, Instruction value)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformBallotFindLSB, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformBallotFindMSB(Instruction resultType, Instruction execution, Instruction value)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformBallotFindMSB, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformShuffle(Instruction resultType, Instruction execution, Instruction value, Instruction id)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformShuffle, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            result.AddOperand(id);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformShuffleXor(Instruction resultType, Instruction execution, Instruction value, Instruction mask)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformShuffleXor, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            result.AddOperand(mask);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformShuffleUp(Instruction resultType, Instruction execution, Instruction value, Instruction delta)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformShuffleUp, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            result.AddOperand(delta);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformShuffleDown(Instruction resultType, Instruction execution, Instruction value, Instruction delta)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformShuffleDown, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            result.AddOperand(delta);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformIAdd(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformIAdd, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformFAdd(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformFAdd, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformIMul(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformIMul, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformFMul(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformFMul, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformSMin(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformSMin, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformUMin(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformUMin, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformFMin(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformFMin, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformSMax(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformSMax, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformUMax(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformUMax, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformFMax(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformFMax, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformBitwiseAnd(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformBitwiseAnd, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformBitwiseOr(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformBitwiseOr, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformBitwiseXor(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformBitwiseXor, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformLogicalAnd(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformLogicalAnd, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformLogicalOr(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformLogicalOr, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformLogicalXor(Instruction resultType, Instruction execution, GroupOperation operation, Instruction value, Instruction clusterSize = null)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformLogicalXor, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(operation);
            result.AddOperand(value);
            if (clusterSize != null)
            {
                result.AddOperand(clusterSize);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformQuadBroadcast(Instruction resultType, Instruction execution, Instruction value, Instruction index)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformQuadBroadcast, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            result.AddOperand(index);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformQuadSwap(Instruction resultType, Instruction execution, Instruction value, Instruction direction)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformQuadSwap, GetNewId(), resultType);
            
            result.AddOperand(execution);
            result.AddOperand(value);
            result.AddOperand(direction);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction GroupNonUniformPartitionNV(Instruction resultType, Instruction value)
        {
            Instruction result = new Instruction(Op.OpGroupNonUniformPartitionNV, GetNewId(), resultType);
            
            result.AddOperand(value);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        // Reserved
        
        protected Instruction TypeRayQueryProvisionalKHR()
        {
            Instruction result = new Instruction(Op.OpTypeRayQueryProvisionalKHR, GetNewId());
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryInitializeKHR(Instruction rayQuery, Instruction accel, Instruction rayFlags, Instruction cullMask, Instruction rayOrigin, Instruction rayTMin, Instruction rayDirection, Instruction rayTMax)
        {
            Instruction result = new Instruction(Op.OpRayQueryInitializeKHR);
            
            result.AddOperand(rayQuery);
            result.AddOperand(accel);
            result.AddOperand(rayFlags);
            result.AddOperand(cullMask);
            result.AddOperand(rayOrigin);
            result.AddOperand(rayTMin);
            result.AddOperand(rayDirection);
            result.AddOperand(rayTMax);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryTerminateKHR(Instruction rayQuery)
        {
            Instruction result = new Instruction(Op.OpRayQueryTerminateKHR);
            
            result.AddOperand(rayQuery);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGenerateIntersectionKHR(Instruction rayQuery, Instruction hitT)
        {
            Instruction result = new Instruction(Op.OpRayQueryGenerateIntersectionKHR);
            
            result.AddOperand(rayQuery);
            result.AddOperand(hitT);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryConfirmIntersectionKHR(Instruction rayQuery)
        {
            Instruction result = new Instruction(Op.OpRayQueryConfirmIntersectionKHR);
            
            result.AddOperand(rayQuery);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryProceedKHR(Instruction resultType, Instruction rayQuery)
        {
            Instruction result = new Instruction(Op.OpRayQueryProceedKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionTypeKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionTypeKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FragmentMaskFetchAMD(Instruction resultType, Instruction image, Instruction coordinate)
        {
            Instruction result = new Instruction(Op.OpFragmentMaskFetchAMD, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction FragmentFetchAMD(Instruction resultType, Instruction image, Instruction coordinate, Instruction fragmentIndex)
        {
            Instruction result = new Instruction(Op.OpFragmentFetchAMD, GetNewId(), resultType);
            
            result.AddOperand(image);
            result.AddOperand(coordinate);
            result.AddOperand(fragmentIndex);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ReadClockKHR(Instruction resultType, Instruction execution)
        {
            Instruction result = new Instruction(Op.OpReadClockKHR, GetNewId(), resultType);
            
            result.AddOperand(execution);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction WritePackedPrimitiveIndices4x8NV(Instruction indexOffset, Instruction packedIndices)
        {
            Instruction result = new Instruction(Op.OpWritePackedPrimitiveIndices4x8NV);
            
            result.AddOperand(indexOffset);
            result.AddOperand(packedIndices);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ReportIntersectionNV(Instruction resultType, Instruction hit, Instruction hitKind)
        {
            Instruction result = new Instruction(Op.OpReportIntersectionNV, GetNewId(), resultType);
            
            result.AddOperand(hit);
            result.AddOperand(hitKind);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ReportIntersectionKHR(Instruction resultType, Instruction hit, Instruction hitKind)
        {
            Instruction result = new Instruction(Op.OpReportIntersectionKHR, GetNewId(), resultType);
            
            result.AddOperand(hit);
            result.AddOperand(hitKind);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IgnoreIntersectionNV()
        {
            Instruction result = new Instruction(Op.OpIgnoreIntersectionNV);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IgnoreIntersectionKHR()
        {
            Instruction result = new Instruction(Op.OpIgnoreIntersectionKHR);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction TerminateRayNV()
        {
            Instruction result = new Instruction(Op.OpTerminateRayNV);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction TerminateRayKHR()
        {
            Instruction result = new Instruction(Op.OpTerminateRayKHR);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction TraceNV(Instruction accel, Instruction rayFlags, Instruction cullMask, Instruction sBTOffset, Instruction sBTStride, Instruction missIndex, Instruction rayOrigin, Instruction rayTmin, Instruction rayDirection, Instruction rayTmax, Instruction payloadId)
        {
            Instruction result = new Instruction(Op.OpTraceNV);
            
            result.AddOperand(accel);
            result.AddOperand(rayFlags);
            result.AddOperand(cullMask);
            result.AddOperand(sBTOffset);
            result.AddOperand(sBTStride);
            result.AddOperand(missIndex);
            result.AddOperand(rayOrigin);
            result.AddOperand(rayTmin);
            result.AddOperand(rayDirection);
            result.AddOperand(rayTmax);
            result.AddOperand(payloadId);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction TraceRayKHR(Instruction accel, Instruction rayFlags, Instruction cullMask, Instruction sBTOffset, Instruction sBTStride, Instruction missIndex, Instruction rayOrigin, Instruction rayTmin, Instruction rayDirection, Instruction rayTmax, Instruction payloadId)
        {
            Instruction result = new Instruction(Op.OpTraceRayKHR);
            
            result.AddOperand(accel);
            result.AddOperand(rayFlags);
            result.AddOperand(cullMask);
            result.AddOperand(sBTOffset);
            result.AddOperand(sBTStride);
            result.AddOperand(missIndex);
            result.AddOperand(rayOrigin);
            result.AddOperand(rayTmin);
            result.AddOperand(rayDirection);
            result.AddOperand(rayTmax);
            result.AddOperand(payloadId);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction TypeAccelerationStructureNV()
        {
            Instruction result = new Instruction(Op.OpTypeAccelerationStructureNV, GetNewId());
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction TypeAccelerationStructureKHR()
        {
            Instruction result = new Instruction(Op.OpTypeAccelerationStructureKHR, GetNewId());
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ExecuteCallableNV(Instruction sBTIndex, Instruction callableDataId)
        {
            Instruction result = new Instruction(Op.OpExecuteCallableNV);
            
            result.AddOperand(sBTIndex);
            result.AddOperand(callableDataId);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ExecuteCallableKHR(Instruction sBTIndex, Instruction callableDataId)
        {
            Instruction result = new Instruction(Op.OpExecuteCallableKHR);
            
            result.AddOperand(sBTIndex);
            result.AddOperand(callableDataId);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction TypeCooperativeMatrixNV(Instruction componentType, Instruction execution, Instruction rows, Instruction columns)
        {
            Instruction result = new Instruction(Op.OpTypeCooperativeMatrixNV, GetNewId());
            
            result.AddOperand(componentType);
            result.AddOperand(execution);
            result.AddOperand(rows);
            result.AddOperand(columns);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CooperativeMatrixLoadNV(Instruction resultType, Instruction pointer, Instruction stride, Instruction columnMajor, MemoryAccessMask memoryAccess = (MemoryAccessMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpCooperativeMatrixLoadNV, GetNewId(), resultType);
            
            result.AddOperand(pointer);
            result.AddOperand(stride);
            result.AddOperand(columnMajor);
            if (memoryAccess != (MemoryAccessMask)int.MaxValue)
            {
                result.AddOperand(memoryAccess);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CooperativeMatrixStoreNV(Instruction pointer, Instruction obj, Instruction stride, Instruction columnMajor, MemoryAccessMask memoryAccess = (MemoryAccessMask)int.MaxValue)
        {
            Instruction result = new Instruction(Op.OpCooperativeMatrixStoreNV);
            
            result.AddOperand(pointer);
            result.AddOperand(obj);
            result.AddOperand(stride);
            result.AddOperand(columnMajor);
            if (memoryAccess != (MemoryAccessMask)int.MaxValue)
            {
                result.AddOperand(memoryAccess);
            }
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CooperativeMatrixMulAddNV(Instruction resultType, Instruction a, Instruction b, Instruction c)
        {
            Instruction result = new Instruction(Op.OpCooperativeMatrixMulAddNV, GetNewId(), resultType);
            
            result.AddOperand(a);
            result.AddOperand(b);
            result.AddOperand(c);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction CooperativeMatrixLengthNV(Instruction resultType, Instruction type)
        {
            Instruction result = new Instruction(Op.OpCooperativeMatrixLengthNV, GetNewId(), resultType);
            
            result.AddOperand(type);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction BeginInvocationInterlockEXT()
        {
            Instruction result = new Instruction(Op.OpBeginInvocationInterlockEXT);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction EndInvocationInterlockEXT()
        {
            Instruction result = new Instruction(Op.OpEndInvocationInterlockEXT);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction DemoteToHelperInvocationEXT()
        {
            Instruction result = new Instruction(Op.OpDemoteToHelperInvocationEXT);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IsHelperInvocationEXT(Instruction resultType)
        {
            Instruction result = new Instruction(Op.OpIsHelperInvocationEXT, GetNewId(), resultType);
            
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UCountLeadingZerosINTEL(Instruction resultType, Instruction operand)
        {
            Instruction result = new Instruction(Op.OpUCountLeadingZerosINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UCountTrailingZerosINTEL(Instruction resultType, Instruction operand)
        {
            Instruction result = new Instruction(Op.OpUCountTrailingZerosINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AbsISubINTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpAbsISubINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction AbsUSubINTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpAbsUSubINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IAddSatINTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpIAddSatINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UAddSatINTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpUAddSatINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IAverageINTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpIAverageINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UAverageINTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpUAverageINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IAverageRoundedINTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpIAverageRoundedINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UAverageRoundedINTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpUAverageRoundedINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction ISubSatINTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpISubSatINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction USubSatINTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpUSubSatINTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction IMul32x16INTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpIMul32x16INTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction UMul32x16INTEL(Instruction resultType, Instruction operand1, Instruction operand2)
        {
            Instruction result = new Instruction(Op.OpUMul32x16INTEL, GetNewId(), resultType);
            
            result.AddOperand(operand1);
            result.AddOperand(operand2);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetRayTMinKHR(Instruction resultType, Instruction rayQuery)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetRayTMinKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetRayFlagsKHR(Instruction resultType, Instruction rayQuery)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetRayFlagsKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionTKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionTKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionInstanceCustomIndexKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionInstanceCustomIndexKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionInstanceIdKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionInstanceIdKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionGeometryIndexKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionGeometryIndexKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionPrimitiveIndexKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionPrimitiveIndexKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionBarycentricsKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionBarycentricsKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionFrontFaceKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionFrontFaceKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionCandidateAABBOpaqueKHR(Instruction resultType, Instruction rayQuery)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionCandidateAABBOpaqueKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionObjectRayDirectionKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionObjectRayDirectionKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionObjectRayOriginKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionObjectRayOriginKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetWorldRayDirectionKHR(Instruction resultType, Instruction rayQuery)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetWorldRayDirectionKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetWorldRayOriginKHR(Instruction resultType, Instruction rayQuery)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetWorldRayOriginKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionObjectToWorldKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionObjectToWorldKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
        protected Instruction RayQueryGetIntersectionWorldToObjectKHR(Instruction resultType, Instruction rayQuery, Instruction intersection)
        {
            Instruction result = new Instruction(Op.OpRayQueryGetIntersectionWorldToObjectKHR, GetNewId(), resultType);
            
            result.AddOperand(rayQuery);
            result.AddOperand(intersection);
            AddToFunctionDefinitions(result);
            
            return result;
        }
        
    }
}
